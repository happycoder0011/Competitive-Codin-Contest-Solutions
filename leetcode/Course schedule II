class Solution {
public:
    map<int,list<int>> adjlist;
    void addedge(int u,int v)
    {
        adjlist[v].push_back(u);
    }
    void print()
    {
    for(auto obj1: adjlist)
    {
        cout<<obj1.first<<"->";
        for(auto obj2: obj1.second)
        {
            cout<<obj2<<", ";
        }
        cout<<endl;
    }
    }
    
    
    vector<int> topologicalsort()
    {
        map<int,bool> visited;
        vector<int> ordering;
      
        for(auto i: adjlist)
        {
            int node = i.first;
            
            if(!visited[node])
            {dfshelper(node,visited,ordering);}
        }
        reverse(ordering.begin(),ordering.end());
        return ordering;
    }
    
    void dfshelper(int node, map<int,bool> &visited,vector<int> &ordering)
    {
        visited[node] = true;
        
        for(int neigh :adjlist[node])
        {
            if(!visited[neigh])
            {dfshelper(neigh,visited,ordering);}
        }
        
        ordering.push_back(node);
        
    }
    
    bool iscyclic()
    {
    map<int,bool> visited;
    map<int,bool> instack;
        
        for(auto i : adjlist)
        {
            int node = i.first;
            
            if(!visited[node])
            {
                bool cyclepresent = iscyclichelper(node,visited,instack);
                
                if(cyclepresent)
                {
                    return true;
                }
            }
            
        }
        return false;
    }
    
    bool iscyclichelper(int node, map<int,bool> &visited, map<int,bool> &instack)
    {
        visited[node] = true;
        instack[node] = true;
        
        for(int neighbour : adjlist[node])
        {
            if(!visited[neighbour] && iscyclichelper(neighbour,visited,instack) || instack[neighbour])
            {return true;}
        }
        instack[node]=false;
        return false;
    }
    
    
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector<int> ans;
        int n = prerequisites.size();
        if(n<=0 )
        {
            int a=0;
            while(numCourses--)
            {
                ans.push_back(a);
                a++;
            }
            return ans;
        }
        
        
        for(int i =0;i!=prerequisites.size();i++)
        {
            addedge(prerequisites[i][0],prerequisites[i][1]);
        }
        if(iscyclic())
            return ans;
        ans = topologicalsort();
        cout<<ans.size();
        if(ans.size()<numCourses)
        {int a=0;
            while(ans.size()!=numCourses)
            {
                if(find(ans.begin(),ans.end(),a)==ans.end())
                {ans.push_back(a);
                    }
                a++;
            }
        }
        return ans;
    }
};
