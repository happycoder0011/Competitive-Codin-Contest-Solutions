class Solution {
public:
    vector<int> primes()
    {
            vector<int> prime;
            prime.push_back(2);
            for(int i=3;i<=10000;i=i+2)
            {
                int c=0;
                for (int j = 3; j<=sqrt(i); j = j+2) 
                 { 
                        if (i%j == 0) 
                        { 
                                c++;
                                break;
                        }      
                 }
                 if(c==0)
                 {
                         prime.push_back(i);
                 }
                 c=0;
            }
            
        return prime;
    }
    int min(int a, int b) { return (a < b) ? a : b; }    
   int cof(int n,int k)
   {
        int C[n + 1][k + 1];
    int i, j;
 
    // Caculate value of Binomial Coefficient
    // in bottom up manner
    for (i = 0; i <= n; i++) {
        for (j = 0; j <= min(i, k); j++) {
            // Base Cases
            if (j == 0 || j == i)
                C[i][j] = 1;
 
            // Calculate value using previously
            // stored values
            else
                C[i][j] = (C[i - 1][j - 1] + C[i - 1][j])%1000000007;
        }
    }
 
    return C[n][k];
   }
    vector<int> waysToFillArray(vector<vector<int>>& queries) 
    {
            vector<int> pri;
            pri = primes();
            vector<int> ans;
            for(int i=0;i<queries.size();i++)
            {
                  if(queries[i][1]==1)
                  {
                          ans.push_back(1);
                  }
                  else
                  {
                  map<int,int> factor;
                  int n =queries[i][1];
                  int j = 0;
                  while(n!=1)
                  {
                          while(n%pri[j]==0)
                          {
                                  factor[pri[j]]++;
                                  n = n/pri[j];
                          }
                          j++;
                  }
                  unsigned long long int res=1;
                  for(auto m : factor)
                  {   
                         res = (res*cof(m.second + queries[i][0]-1,queries[i][0]-1))%1000000007;
                         
                         cout<<res<<endl;
                        
                  }
                   ans.push_back(res);
                          cout<<endl;
                  }
            }
     return ans;       
    }
};
